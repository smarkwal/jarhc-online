AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "jarhc-online-app - JAR Health Check Online serverless application."

Parameters:

  ApiDomain:
    Description: Domain name for API gateway
    Type: String
    Default: api.jarhc.org

  WebsiteDomain:
    Description: Domain name for public website (CloudFront distribution)
    Type: String
    Default: online.jarhc.org

  WebsiteURL:
    Description: URL for public website (CloudFront distribution)
    Type: String
    Default: https://online.jarhc.org

  WebsiteCertificateARN:
    Description: ARN of SSL certificate in us-east-1 required for CloutFront
    Type: String
    Default: arn:aws:acm:us-east-1:837783538267:certificate/b18b61c2-4f55-4f98-8563-a7b6fc5af699

  BucketName:
    Description: Name of S3 bucket hosting public website
    Type: String
    Default: online.jarhc.org

  BucketURL:
    Description: URL of S3 bucket hosting JARHC reports
    Type: String
    Default: https://online.jarhc.org

  LogsBucket:
    Description: Full name of S3 bucket for logs
    Type: String
    Default: aws-cloud-reports.s3.amazonaws.com

  DnsZoneID:
    Description: ID of hosted DNS zone
    Type: String
    Default: Z39VOOPW73P7H0

Globals:

  Function:
    Timeout: 5

  Api:
    Cors:
      AllowOrigin: !Sub "'${WebsiteURL}'"
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowCredentials: true
      MaxAge: "'600'" # cache results of a preflight request for 10 minutes
    EndpointConfiguration:
      Type: REGIONAL
    Domain:
      # Domain name and SSL certificate for API gateway
      DomainName: !Ref ApiDomain
      CertificateArn: !Ref ApiCertificate
      EndpointConfiguration: REGIONAL # default
      Route53:
        # see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-route53configuration.html
        HostedZoneId: !Ref DnsZoneID
        EvaluateTargetHealth: false
        IpV6: false
    MethodSettings:
      - HttpMethod: "*"
        ResourcePath: "/*"
        ThrottlingRateLimit: 10
        ThrottlingBurstLimit: 20

Resources:

  ResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: "jarhc-online-resource-group"
      Description: "Resource group for jarhc-online-app"

  # Lambda function
  JapiccCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      # max price per execution:
      # MemorySize * Timeout / 1024 * $0.0000166667 = $0.001000002
      MemorySize: 1024 # increase memory size to 1 GB for JAPICC
      Timeout: 60 # increase timeout to 60 seconds for JAPICC
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /japicc/check
            Method: POST
      Environment:
        Variables:
          WEBSITE_URL: !Ref WebsiteURL
          BUCKET_NAME: !Ref BucketName
          BUCKET_URL: !Ref BucketURL
    Metadata:
      DockerTag: go1.x-v1
      DockerContext: ./japicc-check
      Dockerfile: Dockerfile

  # Lambda function
  MavenSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./maven-search
      Handler: maven-search
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /maven/search
            Method: GET
      Environment:
        Variables:
          WEBSITE_URL: !Ref WebsiteURL

  # SSL certificate for public website (must be in us-east-1 !!!)
  # WebsiteCertificate:
  #  Type: AWS::CertificateManager::Certificate
  #  Properties:
  #    DomainName: !Ref WebsiteDomain
  #    ValidationMethod: DNS
  #    DomainValidationOptions:
  #      - DomainName: !Ref WebsiteDomain
  #        HostedZoneId: !Ref DnsZoneID

  # SSL certificate for API gateway
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomain
          HostedZoneId: !Ref DnsZoneID

  # S3 Bucket for public website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      LifecycleConfiguration:
        Rules:
          - Id: AutoCleanup
            Status: Enabled
            Prefix: "reports/"
            ExpirationInDays: 30

  # S3 Bucket Policy for public website
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadAccessForEveryone # grant read access to everyone
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Effect: Allow
            Action:
              - 's3:GetObject'
            Principal: '*'
          - Sid: ReadWriteAccessForJapiccCheckFunctionRole # grant read and write access to JapiccCheck function
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Principal:
              AWS: !GetAtt JapiccCheckFunctionRole.Arn

  # CloudFront Distribution for public website
  WebsiteCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Aliases:
          - !Ref WebsiteDomain
        HttpVersion: http2
        Origins:
          - Id: DefaultOrigin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultRootObject: index.html
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCertificateARN
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          Compress: true
          TargetOriginId: DefaultOrigin
          ViewerProtocolPolicy: redirect-to-https
        Logging:
          Bucket: !Ref LogsBucket
          Prefix: "cloudfront-access-logs/"
          IncludeCookies: false

  # Route 53 DNS record for public website (CloudFront distribution)
  WebsiteDnsRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref DnsZoneID
      RecordSets:
        - Name: !Ref WebsiteDomain
          Type: A
          AliasTarget:
            DNSName: !GetAtt WebsiteCloudFrontDistribution.DomainName
            HostedZoneId: Z2FDTNDATAQYW2
            EvaluateTargetHealth: false

Outputs:

  ApiGatewayUrl:
    Description: "Base URL of API Gateway."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  WebsiteBucketUrl:
    Description: "Public URL of S3 Bucket."
    Value: !Sub "https://${WebsiteBucket.RegionalDomainName}/"

  WebsiteCloudFrontDistributionUrl:
    Description: "Public URL of CloudFront Distribution."
    Value: !Sub "https://${WebsiteCloudFrontDistribution.DomainName}/"
