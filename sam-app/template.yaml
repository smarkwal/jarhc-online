AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "jarhc-online-app - JAR Health Check Online serverless application."

Parameters:
  ApiDomain:
    Type: String
    Default: api.jarhc.org
  WebsiteDomain:
    Type: String
    Default: online.jarhc.org
  WebsiteURL:
    Type: String
    # TODO: change after switching to HTTPS
    Default: http://online.jarhc.org
  BucketName:
    Type: String
    Default: online.jarhc.org
  BucketURL:
    Type: String
    # TODO: change after switching to HTTPS
    Default: http://online.jarhc.org
  DnsZoneID:
    Type: String
    Default: Z39VOOPW73P7H0

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

  Api:
    Cors:
      AllowOrigin: !Sub "'${WebsiteURL}'"
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type'"
      AllowCredentials: true
      MaxAge: "'600'" # cache results of a preflight request for 10 minutes
    EndpointConfiguration:
      Type: REGIONAL
    Domain:
      DomainName: !Ref ApiDomain
      CertificateArn: !Ref ApiCertificate
      EndpointConfiguration: REGIONAL # default
      Route53:
        # see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-route53configuration.html
        HostedZoneId: !Ref DnsZoneID
        EvaluateTargetHealth: false
        IpV6: false

Resources:

  ResourceGroup:
    Type: "AWS::ResourceGroups::Group"
    Properties:
      Name: "jarhc-online-resource-group"
      Description: "Resource group for jarhc-online-app"

  JapiccCheckFunction:
    Type: AWS::Serverless::Function # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      # max price per execution:
      # MemorySize * Timeout / 1024 * $0.0000166667 = $0.001000002
      MemorySize: 1024 # increase memory size to 1 GB for JAPICC
      Timeout: 60 # increase timeout to 60 seconds for JAPICC
      Events:
        CatchAll:
          Type: Api # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /japicc/check
            Method: POST
      Environment:
        Variables:
          WEBSITE_URL: !Ref WebsiteURL
          BUCKET_NAME: !Ref BucketName
          BUCKET_URL: !Ref BucketURL
    Metadata:
      DockerTag: go1.x-v1
      DockerContext: ./japicc-check
      Dockerfile: Dockerfile

  MavenSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./maven-search
      Handler: maven-search
      Runtime: go1.x
      Architectures:
        - x86_64
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /maven/search
            Method: GET
      Environment:
        Variables:
          WEBSITE_URL: !Ref WebsiteURL

  # SSL certificate for public website
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref WebsiteDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref WebsiteDomain
          HostedZoneId: !Ref DnsZoneID

  # SSL certificate for API gateway
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomain
          HostedZoneId: !Ref DnsZoneID

  # S3 Bucket for public website
  JarhcOnlineBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
      LifecycleConfiguration:
        # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig.html
        Rules:
          - Id: AutoCleanup
            Status: Enabled
            Prefix: "reports/"
            ExpirationInDays: 7
      # CorsConfiguration: https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html

  # S3 Bucket Policy for public website
  JarhcOnlineBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JarhcOnlineBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadAccessForEveryone # grant read access to everyone
            Resource: !Sub "arn:aws:s3:::${JarhcOnlineBucket}/*"
            Effect: Allow
            Action:
              - 's3:GetObject'
            Principal: '*'
          - Sid: ReadWriteAccessForJapiccCheckFunctionRole # grant read and write access to JapiccCheck function
            Resource: !Sub "arn:aws:s3:::${JarhcOnlineBucket}/*"
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Principal:
              AWS: !GetAtt JapiccCheckFunctionRole.Arn

  JarhcOnlineDnsRecord:
    # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref WebsiteDomain
      HostedZoneId: !Ref DnsZoneID
      Type: A
      AliasTarget:
        # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget-1.html
        # see https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
        DNSName: !Sub "s3-website.${AWS::Region}.amazonaws.com" # S3 website endpoint where S3 bucket has been created
        HostedZoneId: Z21DNDUVLTQW6Q # Route 53 Hosted Zone ID for S3 website endpoint where S3 bucket has been created
        EvaluateTargetHealth: false

Outputs:
  ApiGatewayUrl:
    Description: "Base URL of API Gateway."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  JarhcOnlineBucketUrl:
    Description: "Public URL of S3 Bucket."
    Value: !Sub "https://${JarhcOnlineBucket.RegionalDomainName}/"
