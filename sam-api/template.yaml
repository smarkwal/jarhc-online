AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: API gateway

Parameters:

  ApiDomain:
    Description: Domain name for API gateway
    Type: String
    Default: api.jarhc.org

  CognitoUserPoolARN:
    Description: Cognito User Pool ARN
    Type: String
    Default: arn:aws:cognito-idp:eu-central-1:837783538267:userpool/eu-central-1_duUV8DgO7

  WebsiteURL:
    Description: URL for public website (CloudFront distribution)
    Type: String
    Default: https://online.jarhc.org

  WebsiteBucketName:
    Description: Name of S3 bucket hosting public website
    Type: String
    Default: online.jarhc.org

  WebsiteBucketURL:
    Description: URL of S3 bucket hosting JARHC reports
    Type: String
    Default: https://online.jarhc.org

  DnsZoneID:
    Description: ID of hosted DNS zone
    Type: String
    Default: Z39VOOPW73P7H0

Globals:

  Function:
    Timeout: 5

Resources:

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        ApiKeyRequired: false
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolARN
            Identity:
              Header: Authorization # default
              ReauthorizeEvery: 300 # 300 seconds = 5 minutes (default)
      Cors:
        AllowOrigin: !Sub "'${WebsiteURL}'"
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowCredentials: true
        MaxAge: "'600'" # cache results of a preflight request for 10 minutes
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${WebsiteURL}'"
              Access-Control-Allow-Credentials: "'true'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: !Sub "'${WebsiteURL}'"
              Access-Control-Allow-Credentials: "'true'"
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        # Domain name and SSL certificate for API gateway
        DomainName: !Ref ApiDomain
        CertificateArn: !Ref ApiCertificate
        EndpointConfiguration: REGIONAL # default
        Route53:
          # see https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-api-route53configuration.html
          HostedZoneId: !Ref DnsZoneID
          EvaluateTargetHealth: false
          IpV6: false
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          ThrottlingRateLimit: 10
          ThrottlingBurstLimit: 20
      Models:
        JapiccSubmitModel:
          type: object
          required:
            - oldVersion
            - newVersion
          properties:
            oldVersion:
              type: string
              #pattern: "^[^:]+:[^:]+:[^:]+$"
            newVersion:
              type: string
              #pattern: "^[^:]+:[^:]+:[^:]+$"
          additionalProperties: false
        JarhcSubmitModel:
          type: object
          required:
            - classpath
          properties:
            classpath:
              type: array
              items:
                type: string
                #pattern: "^[^:]+:[^:]+:[^:]+$"
            provided:
              type: array
              items:
                type: string
                #pattern: "^[^:]+:[^:]+:[^:]+$"
          additionalProperties: false
        MavenSearchModel:
          type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: string
              #pattern: "^[^:]+:[^:]+:[^:]+$"
          additionalProperties: false

  # Dead letter queue for async Lambda functions
  ErrorQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: jarhc-online-error-queue
      MessageRetentionPeriod: 1209600 # 14 days

  # Lambda function
  RestApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rest-api
      AutoPublishAlias: Live
      CodeUri: ./rest-api
      Handler: org.jarhc.online.rest.Handler
      Runtime: java11
      Architectures:
        - x86_64
      #SnapStart:
      #  ApplyOn: PublishedVersions
      Tracing: Active
      Role: !GetAtt RestApiFunctionRole.Arn
      # max price per execution:
      # MemorySize * Timeout / 1024 * $0.0000166667 = $0.0000833335
      MemorySize: 512 # increase memory size to 512 MB for REST API
      Timeout: 10 # increase timeout to 10 seconds for REST API
      Events:
        AuthValidate:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /auth/validate
            Method: GET
        JapiccSubmit:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /japicc/submit
            Method: POST
            RequestModel:
              Model: JapiccSubmitModel
              Required: true
              ValidateBody: true
              ValidateParameters: false
        JarhcSubmit:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /jarhc/submit
            Method: POST
            RequestModel:
              Model: JarhcSubmitModel
              Required: true
              ValidateBody: true
              ValidateParameters: false
        MavenSearch:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /maven/search
            Method: POST
            Auth:
              Authorizer: NONE
            RequestModel:
              Model: MavenSearchModel
              Required: true
              ValidateBody: true
              ValidateParameters: false
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucketName
          BUCKET_URL: !Ref WebsiteBucketURL
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

  # Lambda function role
  RestApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rest-api-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  # Lambda function
  JapiccCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: japicc-check
      AutoPublishAlias: Live
      PackageType: Image
      Architectures:
        - x86_64
      Tracing: Active
      Role: !GetAtt AsyncFunctionRole.Arn
      # max price per execution:
      # MemorySize * Timeout / 1024 * $0.0000166667 = $0.001000002
      MemorySize: 1024 # increase memory size to 1 GB for JAPICC
      Timeout: 60 # increase timeout to 60 seconds for JAPICC
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 120 # 2 minutes
        MaximumRetryAttempts: 0 # do not retry
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ErrorQueue.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucketName
          BUCKET_URL: !Ref WebsiteBucketURL
          # TODO: JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
    Metadata:
      DockerTag: v1
      DockerContext: ./japicc-check
      Dockerfile: Dockerfile
      # TODO: mvn clean package -DskipTests

  # Lambda function
  JarhcCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: jarhc-check
      AutoPublishAlias: Live
      CodeUri: ./jarhc-check
      Handler: org.jarhc.online.jarhc.Handler
      Runtime: java11
      Architectures:
        - x86_64
      Tracing: Active
      Role: !GetAtt AsyncFunctionRole.Arn
      # max price per execution:
      # MemorySize * Timeout / 1024 * $0.0000166667 = $0.001000002
      MemorySize: 1024 # increase memory size to 1 GB for JarHC
      Timeout: 60 # increase timeout to 60 seconds for JarHC
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 120 # 2 minutes
        MaximumRetryAttempts: 0 # do not retry
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt ErrorQueue.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref WebsiteBucketName
          BUCKET_URL: !Ref WebsiteBucketURL

  # Lambda function role
  AsyncFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: async-function-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  # SSL certificate for API gateway
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomain
          HostedZoneId: !Ref DnsZoneID

Outputs:

  ApiGatewayUrl:
    Description: "Base URL of API Gateway."
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
